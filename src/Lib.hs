module Lib
    (
        translate,
        parse,
        parseInstruction
    ) where

import Data.Char (isSpace)
import Data.List (isPrefixOf)
import SymbolGenerator (symbols)
import Template
import Memory
import Instruction
import CompiledCode

translate :: String -> String
translate code = unlines $ process $ parse $ lines code where
    process (x:xs) = case x of
        Instruction instruction -> instruction
        CompileError compileError -> error compileError
        : process xs
    process _ = ["// generated by hackvm @SkyZH"]

parse :: [String] -> [CompiledCode]
parse instructions = parse' instructions (symbols "test") where
    parse' :: [String] -> [String] -> [CompiledCode]
    parse' (instruction:xs) symbols
        | "//" `isPrefixOf` (trim instruction) = parse' xs symbols       -- ignore comments
        | all isSpace instruction = parse' xs symbols                    -- ignore empty line
        | otherwise = parseInstruction instruction (head symbols) ++ parse' xs (tail symbols)
    parse' _ _ = []
