module Lib
    ( translate
    , translateMain
    , parse
    , parseInstruction
    , splitClass
    )
where

import           Data.Char                      ( isSpace )
import           Data.List                      ( isPrefixOf )
import           SymbolGenerator                ( symbols )
import           Template
import           Memory
import           Instruction
import           CompiledCode

splitClass :: String -> String
splitClass fileName =
    let (className, _) = break (== '.') fileName in className

translateMain :: String -> String
translateMain code = translate code "Main"

translate :: String -> String -> String
translate code className = unlines $ process $ parse (lines code) className  where
    process (x : xs) =
        case x of
                Instruction  instruction  -> instruction
                CompileError compileError -> error compileError
            : process xs
    process _ = ["// generated by hackvm @SkyZH"]

parse :: [String] -> String -> [CompiledCode]
parse instructions className = parse' instructions (symbols className)  where
    parse' :: [String] -> [String] -> [CompiledCode]
    parse' (instruction : xs) symbols
        | "//" `isPrefixOf` (trim instruction)
        = parse' xs symbols
        |       -- ignore comments
          all isSpace instruction
        = parse' xs symbols
        |                    -- ignore empty line
          otherwise
        = let (ins, comment) = break (== '/') instruction
          in  parseInstruction (trim ins) className (head symbols)
                  ++ parse' xs (tail symbols)
    parse' _ _ = []
